<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>pml</string>
	</array>
	<key>name</key>
	<string>Promela</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#core</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>arith</key>
		<dict>
			<key>match</key>
			<string>(\-|\+|\*|\/|%)</string>
			<key>name</key>
			<string>keyword.operator.arithmetic.promela</string>
		</dict>
		<key>assign</key>
		<dict>
			<key>match</key>
			<string>(=)</string>
			<key>name</key>
			<string>keyword.operator.assignment.promela</string>
		</dict>
		<key>bits</key>
		<dict>
			<key>match</key>
			<string>(~|&amp;|\||\^|&lt;&lt;|&gt;&gt;)</string>
			<key>name</key>
			<string>keyword.operator.bitwise.promela</string>
		</dict>
		<key>comment-block</key>
		<dict>
			<key>begin</key>
			<string>\s*/\*</string>
			<key>end</key>
			<string>\*/</string>
			<key>name</key>
			<string>comment.block.promela</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#runspin</string>
				</dict>
			</array>
		</dict>
		<key>comment-line</key>
		<dict>
			<key>begin</key>
			<string>\s*//</string>
			<key>end</key>
			<string>(?&lt;=^|[^\\])\s*(?=\n)$\n?</string>
			<key>name</key>
			<string>comment.line.double-slash.promela</string>
		</dict>
		<key>comments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment-line</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment-block</string>
				</dict>
			</array>
		</dict>
		<key>comparison</key>
		<dict>
			<key>match</key>
			<string>(==|!=|&lt;=|&gt;=|&lt;|&gt;)</string>
			<key>name</key>
			<string>keyword.operator.comparison.promela</string>
		</dict>
		<key>control-flow</key>
		<dict>
			<key>match</key>
			<string>(\b(atomic|break|d_step|do|od|for|goto|if|fi|unless|else)\b)</string>
			<key>name</key>
			<string>keyword.control.promela</string>
		</dict>
		<key>core</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#keywords</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#defines</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#numbers</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#operators</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#modifiers</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#types</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#control-flow</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#uppercase-id</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#functions</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#id</string>
				</dict>
			</array>
		</dict>
		<key>crement</key>
		<dict>
			<key>match</key>
			<string>(\-\-|\+\+)</string>
			<key>name</key>
			<string>keyword.operator.increment-decrement.promela</string>
		</dict>
		<key>define-include</key>
		<dict>
			<key>begin</key>
			<string>^\s*(#)\s*(include)\b</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>keyword.other.preprocessor.include.promela</string>
				</dict>
			</dict>
			<key>end</key>
			<string>("[^"]*?")</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>string.quoted.double.include.c</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.preprocessor.include.promela</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#ppline-include-innards</string>
				</dict>
			</array>
		</dict>
		<key>define-normal</key>
		<dict>
			<key>begin</key>
			<string>^\s*(#)\s*(define|ifdef|ifndef|if|else|endif|undef)\b</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>keyword.other.preprocessor.promela</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?&lt;=^|[^\\])\s*(?=\n)$\n?</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#core</string>
				</dict>
			</array>
		</dict>
		<key>defines</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#define-normal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#define-include</string>
				</dict>
			</array>
		</dict>
		<key>flow</key>
		<dict>
			<key>match</key>
			<string>(-&gt;|;|::|:|\.\.)</string>
			<key>name</key>
			<string>keyword.operator.flow.promela</string>
		</dict>
		<key>functions</key>
		<dict>
			<key>match</key>
			<string>(\b(assert|printf|printm|empty|nempty|full|nfull)\b)</string>
			<key>name</key>
			<string>entity.name.function.promela</string>
		</dict>
		<key>id</key>
		<dict>
			<key>match</key>
			<string>(\b[A-Za-z_]+\b)</string>
			<key>name</key>
			<string>other.name.variable.promela</string>
		</dict>
		<key>keyword-meta</key>
		<dict>
			<key>match</key>
			<string>(\b(false|inline|ltl|select|skip|true)\b)</string>
			<key>name</key>
			<string>keyword.other.promela</string>
		</dict>
		<key>keywords</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#keyword-meta</string>
				</dict>
			</array>
		</dict>
		<key>logic</key>
		<dict>
			<key>match</key>
			<string>(&amp;&amp;|\|\|)</string>
			<key>name</key>
			<string>keyword.operator.logical.promela</string>
		</dict>
		<key>modifiers</key>
		<dict>
			<key>match</key>
			<string>(\b(active|pid|hidden|init|local|never|notrace|priority|proctype|D_proctype|provided|show|trace|typedef|xr|xs)\b)</string>
			<key>name</key>
			<string>entity.modifier.promela</string>
		</dict>
		<key>numbers</key>
		<dict>
			<key>match</key>
			<string>(\b([0-9]+)\b)</string>
			<key>name</key>
			<string>constant.numeric.integer.promela</string>
		</dict>
		<key>operators</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#assign</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comparison</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#crement</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#arith</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#send</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#bits</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#logic</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#flow</string>
				</dict>
			</array>
		</dict>
		<key>runspin</key>
		<dict>
			<key>begin</key>
			<string>(?:\b(runspin[_a-zA-z0-9-]*):)</string>
			<key>end</key>
			<string>($|\%\s*\*\/)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>comment.block.promela</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.promela</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(%(\./)?[a-z./0-9-]+\b)</string>
					<key>name</key>
					<string>keyword.other.promela</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\s-[A-Za-z0-9_]+)</string>
					<key>name</key>
					<string>variable.parameter.promela</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(=[A-Za-z0-9_]+)</string>
					<key>name</key>
					<string>entity.parameter.promela</string>
				</dict>
			</array>
		</dict>
		<key>send</key>
		<dict>
			<key>match</key>
			<string>(\?|!)</string>
			<key>name</key>
			<string>keyword.operator.send-receive.promela</string>
		</dict>
		<key>string</key>
		<dict>
			<key>begin</key>
			<string>"</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.c</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(")|(?&lt;=^|[^\\])\s*(\n)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.c</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>invalid.illegal.unexpected-end-of-line.c</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.double.promela</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string-placeholder</string>
				</dict>
			</array>
		</dict>
		<key>string-placeholder</key>
		<dict>
			<key>match</key>
			<string>(%[cdeoux])</string>
			<key>name</key>
			<string>constant.other.placeholder.promela</string>
		</dict>
		<key>types</key>
		<dict>
			<key>match</key>
			<string>(\b(chan|bit|bool|byte|short|int|unsigned|mtype|[a-z_]+_t)\b)</string>
			<key>name</key>
			<string>storage.type.promela</string>
		</dict>
		<key>uppercase-id</key>
		<dict>
			<key>match</key>
			<string>(\b[A-Z_]+\b)</string>
			<key>name</key>
			<string>variable.parameter.promela</string>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.promela</string>
	<key>uuid</key>
	<string>21ff38f5-30bb-4c0d-a60c-cf961243b5a0</string>
</dict>
</plist>
